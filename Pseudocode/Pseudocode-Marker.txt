This is a utility class used to draw values into arrays, but only if the
existing value is BattleshipCell->EMPTY. It is used to draw the ships in Battleship,
and it fully supports rotation. All of its methods return this, allowing chaining.
Ex:
    new Marker(board[turn], rotation, row, column, nextShip).draw(2).rotate(1).draw(2);
This throws errors explicitly, if the cell being drawn over is not the empty cell.
This throws errors implicitly, if something it tries to draw is out-of-bounds.

private int rotation
private BattleshipCell ship
private BattleshipCell[][] board

private int currentRow
private int currentColumn

Constructor
Name: Sam Haskins
Date: 11/15/2018
Inputs: The player's board to draw on, the initial rotation, the starting row, the starting column, and the ship to draw
Outputs: A Marker object, ready to draw
Description:
    Initializes the Marker object with the provided properties
Begin
    Let this's rotation be rotation
    Let this's ship be ship
    Let this's board be board
    Let currentRow be row
    Let currentColumn be column
End

Method rotate
Name: Sam Haskins
Date: 11/15/2018
Inputs: The amount to rotate the marker
Outputs: Returns the same Marker with the rotation updated
Description:
    Rotates the marker using rotation += rotate; rotation %= 4
    Returns this, like all other Marker public methods
Begin
    Let this's rotation be (this's rotation plus rotate) modulo 4
    Return this
End

Method draw
Name: Sam Haskins
Date: 11/15/2018
Inputs: The number of times to draw
Outputs: Returns the marker object; updates the board
Description:
    Draws ship onto board using rotation starting from currentRow, currentColumn
    the provided number of times
    Returns this, to allow chaining
Begin
    While n is greater than 0:
        If board[currentRow][currentColumn] is BattleshipCell->Empty:
            Let board[currentRow][currentColumn] be ship
        Else:
            Throw a new IllegalArgumentException
        Invoke move
        Decrement n
    Return this
End

Method move
Name: Sam Haskins
Date: 11/15/2018
Inputs: Uses the rotation
Outputs: Moves one space, using the rotation
Description:
    Using the rotation, moves one space forward
    r:0 = go up
    r:1 = go right
    r:2 = go down
    r:3 = go left
Begin
    If rotation is greater than 3:
        Let rotation be rotation modulo 4
    Else If rotation is less than 0:
        Throw a new IllegalStateException
    
    Switch rotation
        Case 0:
        Increment currentRow
        Break
        Case 1:
        Increment currentColumn
        Break
        Case 2:
        Decrement currentRow
        Break
        Case 3:
        Decrement currentColumn
        break
End